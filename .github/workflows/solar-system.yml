name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: shakerkamal/mongo-db:non-prod
            env:
              MONGO_URI: mongodb://localhost:27017/superData
              MONGO_USERNAME: non-prod-user #${{ vars.MONGO_USERNAME }}
              MONGO_PASSWORD: non-prod-password #${{ secrets.MONGO_PASSWORD }}
            ports:
              - 27017:27017
            
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20

        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
            path: node_modules #~/.npm #${{ steps.npm-cache-dir.outputs.dir }}
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test

        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml
    
    code-coverage:
        name: Code Coverage
        container:
          image: node:18

        services:
          mongo-db:
            image: shakerkamal/mongo-db:non-prod
            options: 
              --name mongo
            env:
              MONGO_URI: mongodb://mongo:27017/superData
              MONGO_USERNAME: non-prod-user #${{ vars.MONGO_USERNAME }}
              MONGO_PASSWORD: non-prod-password #${{ secrets.MONGO_PASSWORD }}

        runs-on: ubuntu-latest
        steps:  
          - uses: actions/checkout@v4
          # - uses: actions/setup-node@v3
          #   with:
          #     node-version: 20
          - name: Cache NPM Dependencies
            uses: actions/cache@v3
            with:
              path: node_modules #~/.npm #${{ steps.npm-cache-dir.outputs.dir }}
              key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

          - run: npm install
          - continue-on-error: true
            run: npm run coverage
          - uses: actions/upload-artifact@v3
            with:
              name: Code-Coverage-Result
              path: coverage
              retention-days: 5

    docker:
      name: Containerization
      needs: 
        - code-coverage
        - unit-testing
      # permissions:  ===> needed if the default github token does not have write permissions
      #   packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Dockerhub login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
  

        - name: Build the image
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Test Docker Image
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Push the image
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Install Kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version
            echo --------------------------
            kubectl get nodes
